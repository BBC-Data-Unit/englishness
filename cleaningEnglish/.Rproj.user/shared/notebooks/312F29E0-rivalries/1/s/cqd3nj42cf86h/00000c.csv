"0","lancs <- c(""Lamcashire"",""Lancashire"")"
"0","manc <- c(""Manchester"",""Manchestet"")"
"0","#pmatch - partial match - can work but it only matches at the start of the string"
"0","rivalries.withlookup$lancs <- pmatch(rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, lancs, 0, duplicates.ok = T)"
"0","#A loop with grepl could check for each - but the second loop overwrites the results of the first loop - so we need some way to avoid this"
"0","for (i in manc){"
"0","  rivalries.withlookup$manchester <- grepl(i, rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)"
"0","}"
"0","#The solution is to use xor to compare each new vector of results with an ongoing one"
"0","#First we create a vector containing entirely false results"
"0","truefalse <- grepl(""FALSE"", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)"
"0","#Then loop through the vector of misspellings"
"0","for (i in 1:length(manc)){"
"0","  print(i)"
"0","  #Now we change truefalse to contain the results of comparing truefalse with the new vector of T/F matches against the misspelling. Some FALSE values will change to TRUE if they are TRUE in the comparison vector"
"0","  #This repeats for each, but truefalse keeps a record"
"0","  truefalse <- xor(truefalse,grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))"
"0","  "
"0","}"
"1","[1]"
"1"," 1"
"1","
"
"1","[1]"
"1"," 2"
"1","
"
"0","#Finally store the results in a column"
"0","rivalries.withlookup$manchester <- truefalse"
"0","#write.csv(rivalries.withlookup,""rivalriesCHECK.csv"")"
