install.packages("rio")
library(rio)
resultsdirty <- import("BBC_EnglishIdentity_March18_Results - Additional Crossbreaks.xls")
View(resultsdirty)
resultsdirty <- import("*.xls")
resultsdirty <- import("BBC_EnglishIdentity_March18_Results - Additional Crossbreaks.xls",sheet=2)
View(resultsdirty)
resultsdirty <- import("BBC_EnglishIdentity_March18_Results - Additional Crossbreaks.xls",sheet=3)
View(resultsdirty)
filename <- "BBC_EnglishIdentity_March18_Results - Additional Crossbreaks.xls"
resultsdirty <- import(filename,sheet=3)
colnames(resultsdirty)
resultscleaning <- data.frame()
colnames(resultscleaning) <- resultsdirty[6,]
resultsdirty[6,]
resultsdirty[7,]
resultsdirty[5,]
resultscleaning <- resultsdirty[6,]
colnames(resultscleaning) <- resultsdirty[5,]
View(resultscleaning)
columnnamesmerged <- paste(resultsdirty[4,],resultsdirty[5,])
columnnamesmerged[5]
columnnamesmerged[5].replace('NA',"")
columnnamesmerged[5].replace('NA','')
columnnamesmerged.replace('NA','')
substitute(columnnamesmerged,'NA','')
?substitute
substitute('NA','',columnnamesmerged)
gsub('NA','',columnnamesmerged)
resultscleaning <- resultsdirty[6:,]
resultscleaning <- resultsdirty[6,]
resultscleaning <- resultsdirty[-(1:4),]
colnames(resultscleaning) <- resultsdirty[5,]
resultscleaning <- resultsdirty[-(1:5),]
colnames(resultscleaning) <- resultsdirty[5,]
columnnamesmerged <- gsub('NA','',columnnamesmerged)
View(resultscleaning)
category <- resultsdirty[4,]
subcategory <- resultsdirty[5,]
View(subcategory)
transposedresults <- cbind(category,subcategory)
View(transposedresults)
category <- vector(resultsdirty[4,])
category <- Vectorize(resultsdirty[4,])
rm(category,subcategory,transposedresults)
library(reshape)
install.packages("reshape")
library(reshape)
transposeresults <- t(resultscleaning)
View(transposeresults)
resultsasdf <- melt(transposeresults)
View(resultsasdf)
resultsasdf <- melt(as.data.frame(), id="1")
transposeresults.bymatrix <- as.data.frame(t(as.matrix(resultscleaning)))
View(transposeresults.bymatrix)
library(data.table)
rm(resultsasdf)
transposeresults.datatable <- transpose(resultscleaning)
View(transposeresults.datatable)
transposeresults.bymatrix$`6`
col6 <- transposeresults.bymatrix$`6`
colnames(transposeresults.bymatrix)
colnames(transposeresults.bymatrix) <- transposeresults.bymatrix(1,)
colnames(transposeresults.bymatrix) <- transposeresults.bymatrix[1,]
transposeresults.bymatrix <- as.data.frame(t(as.matrix(resultscleaning)))
transposeresults.bymatrix[1,]
transposeresults.bymatrix(1,)
transposeresults.bymatrix[1,]
transposeresults[1,]
transposeresultsbym <- transposeresults.bymatrix
transposeresultsbym <- transposeresults.bymatrix
transposeresultsbym[1,]
transposeresults[1,]
colnames(transposeresults.bymatrix) <- transposeresults[1,]
View(resultscleaning)
transposeresults.bymatrix[-1,]
transposeresults.bymatrix <- transposeresults.bymatrix[-1,]
transposeresults.bymatrix$English?
.
transposeresults.bymatrix[,2]
transposeresults.bymatrix[,1]
View(resultscleaning)
View(resultsdirty)
View(resultscleaning)
verystrongenglish <- transposeresults.bymatrix[,7]
verystrongenglish
verystrongenglish <- as.data.frame(transposeresults.bymatrix[,7])
View(verystrongenglish)
rownames(transposeresults.bymatrix)
verystrongenglish <- rownames(transposeresults.bymatrix),as.data.frame(transposeresults.bymatrix[,7])
dfrows <- rownames(transposeresults.bymatrix)
verystrongenglish$subcategory <- rownames(transposeresults.bymatrix)
View(verystrongenglish)
rm(col6)
rm(dfrows)
transposeresults.bymatrix[,"Con"]
transposeresults.bymatrix[,Con]
transposeresults.bymatrix[Con]
transposeresults.bymatri$Con
transposeresults.bymatrix$Con
transposeresults.bymatrix["Con",]
row(transposeresults.bymatrix["Con",])
transposeresults.bymatrix["Con",]
which(names(transposeresults.bymatrix)=="Con")
which(rownames(transposeresults.bymatrix)=="Con")
which(rownames(transposeresults.bymatrix)=="Buckinghamshire")
which(rownames(transposeresults.bymatrix)=="No county")
which(rownames(transposeresults.bymatrix)=="No county")
resultsplacesonly <- transposeresults.bymatrix[-(1:33),]
View(resultsplacesonly)
colnames(resultsplacesonly)
resultsenglishnessonly <- resultsplacesonly[,(1:13)]
View(resultsenglishnessonly)
colnames(resultsplacesonly)
resultsenglishnessonly <- resultsplacesonly[,(1:2,5:13)]
resultsenglishnessonly <- resultsplacesonly[,c(1:2,5:13)]
View(resultsenglishnessonly)
colnames(resultsenglishnessonly)[1]
colnames(resultsenglishnessonly)[c(1,2)]
colnames(resultsenglishnessonly)[c(1:2)]
colnames(resultsenglishnessonly)
colnames(resultsenglishnessonly)[5:11]
colnames(resultsenglishnessonly)[5:11] <- paste(colnames(resultsenglishnessonly)[4],colnames(resultsenglishnessonly)[5:11])
colnames(resultsenglishnessonly)[5:11]
colnames(resultsenglishnessonly)[5:11] <- paste(colnames(resultsenglishnessonly)[3],colnames(resultsenglishnessonly)[4],colnames(resultsenglishnessonly)[5:11])
colnames(resultsenglishnessonly)[5:11]
paste(colnames(resultsenglishnessonly)[3],colnames(resultsenglishnessonly)[5:11])
colnames(resultsenglishnessonly)[5:11]
resultsenglishnessonly <- resultsplacesonly[,c(1:2,5:13)]
colnames(resultsenglishnessonly)[5:11] <- paste(colnames(resultsenglishnessonly)[3],colnames(resultsenglishnessonly)[5:11])
colnames(resultsenglishnessonly)[5:11]
resultsenglishnessonly <- resultsplacesonly[,c(1:2,5:13)]
colnames(resultsenglishnessonly)[5:11] <- paste(colnames(resultsenglishnessonly)[3],colnames(resultsenglishnessonly)[4],colnames(resultsenglishnessonly)[5:11])
colnames(resultsenglishnessonly)[5:11]
resultsenglishnessonly <- resultsplacesonly[,c(1:2,5:13)]
colnames(resultsenglishnessonly)[5:11] <- paste(colnames(resultsenglishnessonly)[5:11],colnames(resultsenglishnessonly)[3],colnames(resultsenglishnessonly)[4])
colnames(resultsenglishnessonly)[5:11]
resultsenglishnessonly <- resultsplacesonly[,c(1:2,5:13)]
#Change columns 5-11 to a combination of
colnames(resultsenglishnessonly)[5:11] <- paste(colnames(resultsenglishnessonly)[5:11],colnames(resultsenglishnessonly)[3],"(",colnames(resultsenglishnessonly)[4],")")
colnames(resultsenglishnessonly)[5:11]
resultsenglishnessonly <- resultsplacesonly[,c(1:2,5:13)]
#Change columns 5-11 to a combination of
colnames(resultsenglishnessonly)[5:11] <- paste(colnames(resultsenglishnessonly)[5:11],"(",colnames(resultsenglishnessonly)[3],colnames(resultsenglishnessonly)[4],")")
colnames(resultsenglishnessonly)[5:11]
write.csv(resultsenglishnessonly,"englishness.csv")
write.csv(resultsplacesonly,"resultslocationsonly.csv")
rivalries.raw <- import(filename,sheet=4)
View(rivalries.raw)
rivalries.4cols <- rivalries.raw[1,3,5,7]
rivalries4cols <- rivalries.raw[c(1,3,5,7)]
View(rivalries4cols)
rm(rivalries4cols)
rivalries.raw <- rivalries.raw[c(1,3,5,7)]
write.csv(rivalries.raw$`Please type in the place or places you’d consider to be a “rival”`, "rivalplaces.txt")
placewords <- scan('rivalplaces.txt', what='char', sep=',')
placewords <- toupper(placewords)
placewords[1]
placewords[10]
placewords <- tolower(placewords)
placewords[10]
placewords <- capitalize(placewords)
librar(Hmisc)
library(Hmisc)
placewords <- toTitleCase(placewords)
library(tools)
placewords <- toTitleCase(placewords)
placewords <- toTitleCase(placewords)
placewords[10]
placewords.split <- strsplit(placewords," ")
placewords.vec <- unlist(placewords.split)
placewords.table <- table(placewords.vec)
placewords.table
order(placewords.table, desc)
placewords.split <- strsplit(placewords," ")
placewords.vec <- unlist(placewords.split)
placewords.table <- table(placewords.vec)
colnames(placewords.table)
colnames(placewords.table)
write.csv(rivals, placewords.table)
write.csv(placewords.table,'rivals.csv')
colnames(resultsplacesonly)
head(colnames(resultsplacesonly),20)
head(colnames(resultsplacesonly),30)
resultsenglishbritishnessonly <- resultsplacesonly[,c(1:2,5:22)]
View(resultsenglishbritishnessonly)
resultsenglishbritishnessonly <- resultsplacesonly[,c(1:2,5:21)]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[5:11] <- paste(
colnames(resultsenglishbritishnessonly)[5:11],
"(",
colnames(resultsenglishbritishnessonly)[4],
")"
)
colnames(resultsenglishbritishnessonly)[12:18]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[12:18] <- paste(
colnames(resultsenglishbritishnessonly)[12:18],
"(",
colnames(resultsenglishbritishnessonly)[11],
")"
)
colnames(resultsenglishbritishnessonly)[12:18]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[5:11] <- paste(
colnames(resultsenglishbritishnessonly)[5:11],
"(",
colnames(resultsenglishbritishnessonly)[4],
")"
)
colnames(resultsenglishbritishnessonly)[13:19]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[13:19] <- paste(
colnames(resultsenglishbritishnessonly)[13:19],
"(",
colnames(resultsenglishbritishnessonly)[12],
")"
)
colnames(resultsenglishbritishnessonly)[13:19]
#Britishness is 15-21, Englishness is 6-14
resultsenglishbritishnessonly <- resultsplacesonly[,c(1:2,5:21)]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[5:11] <- paste(
colnames(resultsenglishbritishnessonly)[5:11],
"(",
colnames(resultsenglishbritishnessonly)[4],
")"
)
colnames(resultsenglishbritishnessonly)[13:19]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[13:19] <- paste(
colnames(resultsenglishbritishnessonly)[13:19],
"(",
colnames(resultsenglishbritishnessonly)[12],
")"
)
colnames(resultsenglishbritishnessonly)[13:19]
#Britishness is 15-21, Englishness is 6-14
resultsenglishbritishnessonly <- resultsplacesonly[,c(1:2,5:21)]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[5:11] <- paste(
colnames(resultsenglishbritishnessonly)[5:11],
"(",
colnames(resultsenglishbritishnessonly)[4],
")",sep=""
)
colnames(resultsenglishbritishnessonly)[13:19]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[13:19] <- paste(
colnames(resultsenglishbritishnessonly)[13:19],
"(",
colnames(resultsenglishbritishnessonly)[12],
")"
)
colnames(resultsenglishbritishnessonly)[13:19]
#Britishness is 15-21, Englishness is 6-14
resultsenglishbritishnessonly <- resultsplacesonly[,c(1:2,5:21)]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[5:11] <- paste(
colnames(resultsenglishbritishnessonly)[5:11],
" (",
colnames(resultsenglishbritishnessonly)[4],
")",sep=""
)
colnames(resultsenglishbritishnessonly)[13:19]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(resultsenglishbritishnessonly)[13:19] <- paste(
colnames(resultsenglishbritishnessonly)[13:19],
" (",
colnames(resultsenglishbritishnessonly)[12],
")",sep=""
)
colnames(resultsenglishbritishnessonly)[13:19]
#Britishness is 15-21, Englishness is 6-14
englishbritishnessonly <- resultsplacesonly[,c(1:2,5:21)]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(englishbritishnessonly)[5:11] <- paste(
colnames(englishbritishnessonly)[5:11],
" (",
colnames(englishbritishnessonly)[4],
")",sep=""
)
colnames(englishbritishnessonly)[13:19]
#Change columns 5-11 to add 4 "(English)" in parentheses
colnames(englishbritishnessonly)[13:19] <- paste(
colnames(englishbritishnessonly)[13:19],
" (",
colnames(englishbritishnessonly)[12],
")",sep=""
)
colnames(englishbritishnessonly)[13:19]
View(englishbritishnessonly)
rm(resultsenglishbritishnessonly)
write.csv(englishbritishnessonly,"englishbritishnessonly.csv")
top50lookup <- import("top50lookup.csv")
top50lookup <- read.csv("top50lookup.csv")
manc <- c("Manchester","Manchestet")
top50lookup$manc <- pmatch(top50lookup$All.values, manc)
View(top50lookup)
manc <- c("Manchester.*","Manchestet")
top50lookup$manc <- pmatch(top50lookup$All.values, manc)
#change this to new file name before running
filename <- "englishnessmarch18v2.xls"
#activate rio library
library(rio)
#import the third sheet of that filename
rivalriesresults <- import(filename,sheet=4)
top50lookup <- import("top50lookup.csv")
#Make sure both data frames have a column with the same name
colnames(top50lookup)[1] <- "rival"
rivalriesresults$rival <- rivalriesresults$`Please type in the place or places you’d consider to be a “rival”`
#Create merged version. all.x = TRUE makes it a LEFT JOIN, i.e. no data from x is lost when there's no match
rivalries.withlookup <- merge(x = rivalriesresults, y = top50lookup, all.x = TRUE)
rivalriespivot <- data.frame(table(rivalries.withlookup$`Clean version`))
lancs <- c("Lamcashire","Lancashire")
manc <- c("Manchester","Manchestet")
rivalries.withlookup$lancs <- pmatch(rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, lancs, 0, duplicates.ok = T)
#The second loop overwrites the results of the first loop - needs rethinking
for (i in manc){
rivalries.withlookup$manchester <- grepl(i, rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
}
write.csv(rivalries.withlookup,"rivalriesCHECK.csv")
vec1 <- grepl("Manchester", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
vec2 <- grepl("Manchestet", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
rivalries.withlookup$vec1 <- grepl("Manchester", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
rivalries.withlookup$vec2 <- grepl("Manchestet", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
View(rivalries.withlookup)
rivalries.withlookup$vec2 <- NULL
rivalries.withlookup$vec1 <- NULL
rivalries.tf$vec1 <- grepl("Manchester", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
rivalries.tf <- rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`
rivalries.tf$vec1 <- grepl("Manchester", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
rivalries.tf$vec2 <- grepl("Manchestet", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
rivalries.tf <- rivalries.withlookup[,3]
rivalries.tf <- rivalries.withlookup[c(3)]
View(rivalries.tf)
rivalries.tf <- rivalries.withlookup[c(4)]
rivalries.tf <- rivalries.withlookup[c(6)]
rivalries.tf <- rivalries.withlookup[c(4)]
rivalries.tf <- rivalries.withlookup[c(8)]
rivalries.tf$vec1 <- grepl("Manchester", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
rivalries.tf$vec2 <- grepl("Manchestet", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
rivalries.tf$finalvec <- or(rivalries.tf$vec1,rivalries.tf$vec2)
rivalries.tf$finalvec <- xor(rivalries.tf$vec1,rivalries.tf$vec2)
for (i in manc){
assign(paste("vec",i,sep=""),grepl(i, rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
}
for (i in manc){
assign(paste("vec",i,sep=""),grepl(i, rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
for (i in length(manc)){
assign(paste("vec",i,sep=""),grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
rm(vecManchester,vecManchestet)
for (i in length(manc)){
assign(paste("vec",i,sep=""),grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
rm(vec1)
for (i in length(manc)){
assign(paste("vec",i,sep=""),grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
rm(vec2)
for (i in length(manc)){
assign(paste("vec",i,sep=""),grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
for (i in length(manc)){
print(i)
assign(paste("vec",i,sep=""),grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
for (i in seq(1,length(manc))){
print(i)
assign(paste("vec",i,sep=""),grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
for (i in 1:length(manc)){
print(i)
assign(paste("vec",i,sep=""),grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
vecnames <- c()
for (i in 1:length(manc)){
print(i)
assign(paste("vec",i,sep=""),grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
vecnames <- c(vecnames, paste("vec",i,sep=""))
}
vecnames <- c()
for (i in 1:length(manc)){
print(i)
assign(paste("vec",i,sep=""),grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
vecnames <- c(vecnames, paste("vec",i,sep=""))
}
finalvec <- xor(vecnames)
finalvec <- xor(vecnames[i],vecnames[i-1])
truefalse <- grepl("FALSE", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
for (i in 1:length(manc)){
print(i)
truefalse <- xor(truefalse,grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
rivalries.tf$tf <- truefalse
rm(rivalries.tf)
rivalries.withlookup$lancs <- NULL
View(rivalries.withlookup)
rivalries.withlookup <- truefalse
#Make sure both data frames have a column with the same name
colnames(top50lookup)[1] <- "rival"
rivalriesresults$rival <- rivalriesresults$`Please type in the place or places you’d consider to be a “rival”`
#Create merged version. all.x = TRUE makes it a LEFT JOIN, i.e. no data from x is lost when there's no match
rivalries.withlookup <- merge(x = rivalriesresults, y = top50lookup, all.x = TRUE)
lancs <- c("Lamcashire","Lancashire")
manc <- c("Manchester","Manchestet")
#pmatch - partial match - can work but it only matches at the start of the string
rivalries.withlookup$lancs <- pmatch(rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, lancs, 0, duplicates.ok = T)
#A loop with grepl could check for each - but the second loop overwrites the results of the first loop - so we need some way to avoid this
for (i in manc){
rivalries.withlookup$manchester <- grepl(i, rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
}
#The solution is to use xor to compare each new vector of results with an ongoing one
#First we create a vector containing entirely false results
truefalse <- grepl("FALSE", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
#Then loop through the vector of misspellings
for (i in 1:length(manc)){
print(i)
#Now we change truefalse to contain the results of comparing truefalse with the new vector of T/F matches against the misspelling. Some FALSE values will change to TRUE if they are TRUE in the comparison vector
#This repeats for each, but truefalse keeps a record
truefalse <- xor(truefalse,grepl(manc[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
#Finally store the results in a column
rivalries.withlookup$manchester <- truefalse
#write.csv(rivalries.withlookup,"rivalriesCHECK.csv")
table(top50lookup)
table(top50lookup$`Clean version`)
cleancities <- tapply(top50lookup$`Clean version`)
cleancities <- table(top50lookup$`Clean version`)
order(cleancities)
cleancities[order(cleancities)]
cleancities[order(cleancities), desc]
cleancities[order(-cleancities)]
cleancities <- tapply(top50lookup$`Grand Total`, top50lookup$`Clean version`, sum)
cleancities[order(-cleancities)]
cleancities <- cleancities[order(-cleancities)]
head(cleancities)
head(cleancities, 30)
cleancities[1]
cleancities[1][1]
lancs <- subset(top50lookup, top50lookup$`Clean version` == Lancashire)
lancs <- subset(top50lookup, top50lookup$`Clean version` == "Lancashire")
View(lancs)
lancs <- lancs$`Unclean or clean to lookup`
for (i in 1:length(lancs)){
print(i)
#Now we change truefalse to contain the results of comparing truefalse with the new vector of T/F matches against the misspelling. Some FALSE values will change to TRUE if they are TRUE in the comparison vector
#This repeats for each, but truefalse keeps a record
truefalse <- xor(truefalse,grepl(lancs[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
#Finally store the results in a column
rivalries.withlookup$lancs <- truefalse
truefalse <- grepl("FALSE", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
for (i in 1:length(lancs)){
print(i)
#Now we change truefalse to contain the results of comparing truefalse with the new vector of T/F matches against the misspelling. Some FALSE values will change to TRUE if they are TRUE in the comparison vector
#This repeats for each, but truefalse keeps a record
truefalse <- xor(truefalse,grepl(lancs[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
#Finally store the results in a column
rivalries.withlookup$lancs <- truefalse
pivotbylancs <- tapply(rivalries.withlookup$Region, rivalries.withlookup$lancs, count)
pivotbylancs <- tapply(rivalries.withlookup$Region, rivalries.withlookup$lancs)
write.csv(rivalries.withlookup,"rivalrieswithlookup.csv")
brum <- subset(top50lookup, top50lookup$`Clean version` == "Birmingham")
brum <- brum$`Unclean or clean to lookup`
truefalse <- grepl("FALSE", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
for (i in 1:length(brum)){
print(i)
#Now we change truefalse to contain the results of comparing truefalse with the new vector of T/F matches against the misspelling. Some FALSE values will change to TRUE if they are TRUE in the comparison vector
#This repeats for each, but truefalse keeps a record
truefalse <- xor(truefalse,grepl(brum[i], rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T))
}
#Finally store the results in a column
rivalries.withlookup$brum <- truefalse
write.csv(rivalries.withlookup,"rivalrieswithlookup.csv")
rivalries.withlookup$manc <- grepl("manc", rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
rivalries.withlookup$lanc <- grepl(paste(lancs,collapse="|"), rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
rivalries.withlookup$brum <- grepl(paste(brum,collapse="|"), rivalries.withlookup$`Please type in the place or places you’d consider to be a “rival”`, ignore.case = T)
lancs
write.csv(rivalries.withlookup,"rivalrieswithlookup.csv")
